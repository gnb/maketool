<!DOCTYPE ARTICLE PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
<!ENTITY % buildents SYSTEM "entities.sgml">
%buildents;
]>

<article class="whitepaper" status="DRAFT" lang="en" id="maketool-help"
         revision="$Id: help.sgml,v 1.11 2001-09-23 08:19:54 gnb Exp $"
         vendor="Greg Banks">
<artheader>
  <title>Maketool</title>
  <author>
    <firstname>Greg</firstname>
    <surname>Banks</surname>
  </author>
  <pubdate role="cvs">$Date: 2001-09-23 08:19:54 $</pubdate>
  <releaseinfo>This is version &version;</releaseinfo>
  <copyright>
    <year>2000</year>
    <year>2001</year>
    <holder role="mailto:gnb@alphalink.com.au">Greg Banks</holder> 
  </copyright>
  <legalnotice>
    <title>Copyright</title>
    <para>Permission is granted to copy, distribute and/or modify
    this document under the terms of the Open Publication License,
    version 2.0.</para>
  </legalnotice>
  
  <abstract>
    <para>
    Maketool is a GUI program for running the GNU make utility, or
    <command>gmake</command>, to build software.
    </para>
    <para>
    GNU make is a powerful utility for organising the process of
    compiling and linking software, and is widely used in Open Source
    and commercial software.
    </para>
  </abstract>

</artheader>



<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="main-window" xreflabel="Main window">
<title>Main window</title>

<graphic format=GIF fileref="mainwin.gif"></graphic>

<para>
This is maketool's main window.  The various parts of the main window are:
</para>


<variablelist>

  <varlistentry>
    <term>menubar</term>
    <listitem>
      <para>
      Each menu contains commands which allow you to drive maketool.
      The menubar can be detached from maketool by dragging the handle
      at the left.  Each menu can be detached from maketool by selecting
      the dashed line at it's top.
      </para>
      <para>
      See also <xref linkend="file-menu">, <xref linkend="edit-menu">,
      <xref linkend="build-menu">, <xref linkend="view-menu">, and
      <xref linkend="help-menu">.
      </para>
    </listitem>
  </varlistentry>
  
  <varlistentry>
    <term>toolbar</term>
    <listitem>
      <para>
      Each tool is a shortcut to a menu item, arranged for your
      convenience.  The toolbar can be detached from maketool
      by dragging the handle at the left.
      </para>
      <para>
      See also <xref linkend="again-tool">,
      <xref linkend="stop-tool">, <xref linkend="all-tool">,
      <xref linkend="clean-tool">, <xref linkend="clear-tool">,
      <xref linkend="edit-next-tool">, <xref linkend="edit-file-next-tool">,
      <xref linkend="print-tool">.
      </para>
    </listitem>
  </varlistentry>
  
  <varlistentry>
    <term>log window<anchor id="log-window" xreflabel="Log window"></term>
    <listitem>
      <para>
      This window shows the output of <command>gmake</command>.
      As shown in the example, errors and warnings are highlighted;
      double-clicking on an error or warning will start an editor
      showing you the line in the source file which caused the
      error or warning.
      </para>
      <para>
      Errors and warnings are distinguished by both colors and icons.
      You can change the colors in the <xref linkend="colors-pane">.
      </para>
      <para>
      The presentation of text in the log window is controlled by
      various options in the <xref linkend="view-menu">.
      </para>
    </listitem>
  </varlistentry>
  
  <varlistentry>
    <term>status bar</term>
    <listitem>
      <para>
      Messages from maketool itself (rather than <command>gmake</command>)
      are displayed here.
      </para>
    </listitem>
  </varlistentry>
  
  <varlistentry>
    <term>progress indicator</term>
    <listitem>
      <para>
      When <command>gmake</command> is running, this area displays
      an animation of a brick wall building itself, to show you 
      that something is happening.
      </para>
    </listitem>
  </varlistentry>
  
</variablelist>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="ok" xreflabel="Ok Button">
<title>Ok Button</title>

<graphic format=GIF fileref="ok.gif"></graphic>

<para>
Click this button to apply all the changes you have made to this
dialog window and close the window.
</para>

<para>
See also:
<xref linkend="apply">,
<xref linkend="cancel">
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="apply" xreflabel="Apply Button">
<title>Apply Button</title>

<graphic format=GIF fileref="apply.gif"></graphic>

<para>
Click this button to apply all the changes you have made to this
dialog window, without closing the dialog window.
</para>

<para>
See also:
<xref linkend="ok">,
<xref linkend="cancel">
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="cancel" xreflabel="Cancel Button">
<title>Cancel Button</title>

<graphic format=GIF fileref="cancel.gif"></graphic>

<para>
Click this button to discard all the changes you have made to this
dialog window and close the dialog.
</para>

<para>
See also:
<xref linkend="ok">,
<xref linkend="apply">
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="file-menu" xreflabel="File menu">
<title>File menu</title>

<graphic format=GIF fileref="file-menu.gif"></graphic>

<variablelist>

  <varlistentry>
    <term><guibutton>Open Log...</guibutton></term>
    <listitem>
      <para>
      Shows the <xref linkend="open-log-file-window"> which allows you
      to choose a filename of <command>gmake</command> output to be opened
      and displayed in maketool.  This file can be a file saved by
      the <guibutton>Save Log...</guibutton> menu item, or a file
      generated from the command line using a command like:
      </para>
      <programlisting>
gmake some-target 2>&1 | tee <emphasis>make.log</emphasis>
      </programlisting>
      <para>
      or
      </para>
      <programlisting>
gmake some-target > <emphasis>make.log</emphasis> 2>&1
      </programlisting>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Save Log...</guibutton></term>
    <listitem>
      <para>
      Shows the <xref linkend="save-log-file-window"> which allows you
      to choose a filename to which the text in the <xref linkend="log-window">
      will be saved.  The file will contain the raw text from all
      <command>gmake</command> runs, exactly as <command>gmake</command>
      emitted it.  The file can later be loaded into maketool again using
      the <guibutton>Open Log...</guibutton> menu item, or viewed in a
      text editor.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Change Directory...</guibutton></term>
    <listitem>
      <para>
      <anchor id="change-directory" xreflabel="Change Directory menu item">
      Shows the <xref linkend="change-directory-window"> which allows you
      to choose a directory.  Maketool will make that directory it's
      current directory.  Maketool will then scan any Makefile present
      in the directory and show the targets defined by the Makefile
      in the <xref linkend="build-menu">.  Finally, maketool will
      add the old directory to the <guibutton>Previous Directories</guibutton>
      menu.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Previous Directories</guibutton></term>
    <listitem>
      <para>
      Lists the last directories in which maketool has been used.
      Select a directory, and maketool will change to that directory
      as if you had used the <guibutton>Change Directory...</guibutton>
      menu item.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Edit Makefile...</guibutton></term>
    <listitem>
      <para>
      Starts up an editor session editing the Makefile in the current
      directory.  If the current directory uses a system like
      <command>autoconf</command> or <command>Imake</command> to
      generate the Makefile from another source file, that other
      source file will be edited instead.
      </para>
      <para>
      The exact filenames checked by this menu item are (in order):
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	  <filename>GNUmakefile</filename>
	  </para>
	</listitem>
	<listitem>
	  <para>
	  <filename>makefile</filename>
	  </para>
	</listitem>
	<listitem>
	  <para>
	  <filename>Makefile</filename>
	  </para>
	</listitem>
      </itemizedlist>
      <para>
      If no Makefile is present, or it's filename is
      <filename>Makefile</filename>, the following filenames
      are also checked (in order):
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	  <filename>Makefile.am</filename> (for <command>automake</command>)
	  </para>
	</listitem>
	<listitem>
	  <para>
	  <filename>Makefile.in</filename> (for <command>autoconf</command>)
	  </para>
	</listitem>
	<listitem>
	  <para>
	  <filename>Imakefile</filename> (for <command>Imake</command>)
	  </para>
	</listitem>
      </itemizedlist>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Print...</guibutton></term>
    <listitem>
      <para>
      Shows the <xref linkend="print-window"> to allow you to print
      the contents of the <xref linkend="log-window"> to a printer.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Exit</guibutton></term>
    <listitem>
      <para>
      Quits maketool.
      </para>
      <para>
      Note that if you haven't saved the contents of the
      <xref linkend="log-window">, maketool will <emphasis>NOT</emphasis>
      ask you if you want to save.
      </para>
    </listitem>
  </varlistentry>

</variablelist>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="edit-menu" xreflabel="Edit menu">
<title>Edit menu</title>

<graphic format=GIF fileref="edit-menu.gif"></graphic>

<variablelist>

  <varlistentry>
    <term><guibutton>Edit Error</guibutton></term>
    <listitem>
      <para>
      Starts an editor session editing the source file and line
      mentioned in the line currently selected in the
      <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Edit Next Error</guibutton></term>
    <listitem>
      <para>
      Searches forwards in the <xref linkend="log-window"> for the next
      error or warning message, starting at the currently selected
      line, and starts an editor session editing the source file and line
      mentioned in that line.
      </para>
      <para>
      If the <xref linkend="edit-next-ignores-warnings"> option is set,
      <guibutton>Edit Next Error</guibutton> will ignore warnings and
      only find errors.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Edit Prev Error</guibutton></term>
    <listitem>
      <para>
      Like <guibutton>Edit Next Error</guibutton> but searches backwards.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Edit Next File Error</guibutton></term>
    <listitem>
      <para>
      Like <guibutton>Edit Next Error</guibutton> but first skips to
      the next source file.  This is useful when an error early in a
      source file confuses the compiler and generates many spurious errors.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Copy</guibutton></term>
    <listitem>
      <para>
      Copies the text of the currently selected line in the
      <xref linkend="log-window"> to the clipboard, from where it can
      be pasted into a text editor.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Find...</guibutton></term>
    <listitem>
      <para>
      Shows the <xref linkend="find-window"> which allows you to
      search the contents of the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Find Again...</guibutton></term>
    <listitem>
      <para>
      Repeats the last search (from the <xref linkend="find-window">).
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Preferences...</guibutton></term>
    <listitem>
      <para>
      Shows the <xref linkend="preferences-window"> which allows you
      to edit maketool's various options and parameters.
      </para>
    </listitem>
  </varlistentry>

</variablelist>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="build-menu" xreflabel="Build menu">
<title>Build menu</title>

<graphic format=GIF fileref="build-menu.gif"></graphic>

<variablelist>

  <varlistentry>
    <term><guibutton>Again</guibutton></term>
    <listitem>
      <para>
      Runs <command>gmake</command> with the same
      target you used last time you ran <command>gmake</command> (from the
      <guimenu>Build</guimenu> menu, the <xref linkend="all-tool">,
      or the <xref linkend="clean-tool">).  The target is shown in
      brackets.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Stop</guibutton></term>
    <listitem>
      <para>
      Stops a running <command>gmake</command>.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Dryrun Only</guibutton></term>
    <listitem>
      <para>
      While this checkbox is on, <command>gmake</command> does not
      perform any building, and instead only shows the commands it
      would use for building.  This is useful for debugging Makefiles.
      </para>
      <para>
      This option uses the <option>-n</option> flag to <command>gmake</command>.
      </para>
    </listitem>
  </varlistentry>
  
  <varlistentry>
    <term><guibutton>Makefile</guibutton></term>
    <listitem>
      <para>
      Updates the <filename>Makefile</filename> from whatever
      files are used to create it.  This command only appears
      if the current directory uses a make system (see
      <xref linkend="make-systems">) to generate the
      <filename>Makefile</filename>.
      </para>
      <para>
      Maketool can also perform this update automatically every
      time a target is built; see the <xref linkend="enable-make-makefile">
      checkbox.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>make system commands</term>
    <listitem>
      <para>
      The section of the menu between the first and second separators
      shows commands related to the make system used in the current directory.
      See <xref linkend="make-systems"> for a description of
      each command.
      </para>
      <para>
      This section is updated when the current directory
      is changed using the <xref linkend="change-directory">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>standard targets</term>
    <listitem>
      <para>
      The section of the menu between the second and third separators
      shows all the targets defined by the Makefile in the current
      directory, which are standard targets described by the GNU
      Makefile Standards.  Those targets, and their standard meanings
      are described in <xref linkend="standard-targets">.
      </para>
      <para>
      Selecting a target causes that target to be built using
      <command>gmake</command> and the output from <command>gmake</command>
      to be displayed in the <xref linkend="log-window">.
      </para>
      <para>
      This section is updated when the current directory is changed
      using the <xref linkend="change-directory">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>non-standard targets</term>
    <listitem>
      <para>
      The section of the menu after the third separator
      shows all the targets defined by the Makefile in the current
      directory, except those which are standard targets,
      and except certain targets which maketool considers
      "internal" to the Makefile.
      </para>
      <para>
      Selecting a target causes that target to be built using
      <command>gmake</command> and the output from <command>gmake</command>
      to be displayed in the <xref linkend="log-window">.
      </para>
      <para>
      This section is updated when the current directory is changed
      using the <xref linkend="change-directory">.
      </para>
    </listitem>
  </varlistentry>

</variablelist>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="view-menu" xreflabel="View menu">
<title>View menu</title>

<graphic format=GIF fileref="view-menu.gif"></graphic>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="help-menu" xreflabel="Help menu">
<title>Help menu</title>

<graphic format=GIF fileref="help-menu.gif"></graphic>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="again-tool" xreflabel="Again tool">
<title>Again tool</title>

<graphic format=GIF fileref="tools-again.gif"></graphic>

<para>
Click this tool to run <command>gmake</command> with the same target
you used last time you ran <command>gmake</command> (from the
<guimenu>Build</guimenu> menu, the <xref linkend="all-tool">,
or the <xref linkend="clean-tool">).  The tooltip shows
you which target this will be.
</para>

<para>
This tool becomes available once you have started at least
one <command>gmake</command> run.
</para>

<para>
See also:
<xref linkend="all-tool">,
<xref linkend="clean-tool">
<!-- <xref linkend="menu-build"> -->
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="stop-tool" xreflabel="Stop tool">
<title>Stop tool</title>

<graphic format=GIF fileref="tools-stop.gif"></graphic>

<para>
Click this tool to stop the current <command>gmake</command> run.
</para>

<para>
This tool becomes available only during a <command>gmake</command>
run.
</para>

<para>
See also:
<xref linkend="all-tool">,
<xref linkend="clean-tool">
<!-- <xref linkend="menu-build"> -->
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="all-tool" xreflabel="Build All tool">
<title>Build All tool</title>

<graphic format=GIF fileref="tools-all.gif"></graphic>

<para>
Click this tool to run <command>gmake</command> with the
target <varname>all</varname>.  Makefiles which adhere to GNU
Makefile standards will compile and link all programs
and libraries (but not necessarily any documentation).
</para>

<para>
This tool becomes available if the <filename>Makefile</filename>
in the current directory defines an <varname>all</varname> target.
Like all build tools and menu items, it becomes unavailable while
<command>gmake</command> is running.
</para>

<para>
See also:
<xref linkend="clean-tool">.
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="clean-tool" xreflabel="Clean tool">
<title>Clean tool</title>

<graphic format=GIF fileref="tools-clean.gif"></graphic>

<para>
Click this tool to run <command>gmake</command> with the
target <varname>clean</varname>.  Makefiles which adhere to GNU
Makefile standards will delete all files which are normally
created by building, such as programs, libraries, and object
files, but not files which record the configuration.
</para>

<para>
Use this to force a complete rebuild after changing the
configuration, or after setting variables like
<varname>CFLAGS</varname> or <varname>CC</varname>
in the <xref linkend="variables-pane">.
</para>

<para>
This tool becomes available if the <filename>Makefile</filename>
in the current directory defines a <varname>clean</varname> target.
Like all build tools and menu items, it becomes unavailable while
<command>gmake</command> is running.
</para>

<para>
See also:
<xref linkend="all-tool">
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="clear-tool" xreflabel="Clear Log tool">
<title>Clear Log tool</title>

<graphic format=GIF fileref="tools-clear.gif"></graphic>

<para>
Click this tool to delete all text in the window.
</para>

<para>
This toolbar button becomes available when the log window contains text.
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="edit-next-tool" xreflabel="Edit Next Error tool">
<title>Edit Next Error tool</title>

<graphic format=GIF fileref="tools-edit-next.gif"></graphic>

<para>
Click this tool to edit the next error or warning after the
currently selected line in the log window.  If the <guilabel>Edit Next
ignores warnings</guilabel> toggle in the <guilabel>Preferences</guilabel>
window is set, this button will skip over warnings and only find errors.
</para>

<para>
This tool becomes available when the log window contains text.
</para>

<para>
See also:
<xref linkend="edit-file-next-tool">
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="edit-file-next-tool" xreflabel="Edit File Next Error tool">
<title>Edit File Next Error tool</title>

<graphic format=GIF fileref="tools-edit-file-next.gif"></graphic>

<para>
Click this tool to edit the next error or warning after the
currently selected line in the log window.  Unlike the
<xref linkend="edit-next-tool">, this tool first skips all errors
and warnings in the same file (compilation unit) as the selected
line.  This is useful when an error early in the file confuses
the compiler.  If the <xref linkend="edit-next-ignores-warnings">
option is set, this tool will skip over warnings and only find errors.
</para>

<para>
This tool becomes available when the log window contains text.
</para>

<para>
See also:
<xref linkend="edit-next-tool">
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="print-tool" xreflabel="Print tool">
<title>Print tool</title>

<graphic format=GIF fileref="tools-print.gif"></graphic>

<para>
Click this tool to pop up the <xref linkend="print-window">
which you can use to print the text in the log window.
</para>

<para>
This tool becomes available when the log window contains text.
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="open-log-file-window" xreflabel="Open Log File window">
<title>Open Log File window</title>

<graphic format=GIF fileref="open-log-file-window.gif"></graphic>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="save-log-file-window" xreflabel="Save Log File window">
<title>Save Log File window</title>


<graphic format=GIF fileref="save-log-file-window.gif"></graphic>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="change-directory-window" xreflabel="Change Directory window">
<title>Change Directory window</title>


<graphic format=GIF fileref="change-directory-window.gif"></graphic>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="print-window" xreflabel="Print window">
<title>Print window</title>


<graphic format=GIF fileref="print-window.gif"></graphic>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="find-window" xreflabel="Find window">
<title>Find window</title>


<graphic format=GIF fileref="find-window.gif"></graphic>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="preferences-window" xreflabel="Preferences window">
<title>Preferences window</title>

<para>
Yadda, yadda, yadda.
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="general-pane" xreflabel="General pane">
<title>General pane</title>

<graphic format=GIF fileref="general-pane.gif"></graphic>

<anchor id="continue-despite-failures" xreflabel="Continue despite failures">
<para>
Select this toggle to have <command>gmake</command> continue building
targets after a target fails to be built.  The normal behaviour of
<command>gmake</command> is to stop when the first target fails.
</para>

<para>
This toggle sets the <option>-k</option> flag to <command>gmake</command>.
</para>

<anchor id="edit-next-ignores-warnings" xreflabel="Edit Next ignores warnings">

<anchor id="enable-make-makefile"
    xreflabel="Build Makefile from Imakefile or Makefile.in">

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="variables-pane" xreflabel="Variables pane">
<title>Variables pane</title>


<graphic format=GIF fileref="variables-pane.gif"></graphic>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="programs-pane" xreflabel="Programs pane">
<title>Programs pane</title>


<graphic format=GIF fileref="programs-pane.gif"></graphic>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="colors-pane" xreflabel="Colors pane">
<title>Colors pane</title>


<graphic format=GIF fileref="colors-pane.gif"></graphic>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="page-setup-pane" xreflabel="Page Setup pane">
<title>Page Setup pane</title>


<para>Yadda, yadda, yadda</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="configure-window" xreflabel="Configure Options window">
<title>Configure Options window</title>

<graphic format=GIF fileref="configure-window-basic.gif"></graphic>

<para>
This window allows you to choose among the various configuration
options provided by the <xref linkend="autoconf">
<filename>configure</filename> script in the current directory.
</para>

<para>
This window can be opened automatically when the <filename>Makefile</filename>
is being updated (if the <xref linkend="enable-make-makefile"> checkbox
is on), or manually by selecting <guibutton>Makefile</guibutton>
or <guibutton>Run configure...</guibutton> from the <xref linkend="build-menu">.
See <xref linkend="make-systems"> for more information.
</para>

<para>
When the window is opened, the options you chose the last time
are the default values.
  <footnote>
    <para>
    An exception is the <guibutton>Do not create output files</guibutton>
    option, which for obvious reasons is not saved in
    <filename>config.status</filename>.
    </para>
  </footnote>
This information is read from the <filename>config.status</filename>
file, so it will be used even if you have never used maketool in this
directory before.
</para>

<para>
The window has two modes, <emphasis>Basic</emphasis> (the default)
and <emphasis>Advanced</emphasis>.  The <guibutton>Advanced...</guibutton>
button toggles between these two modes.
</para>

<section>
<title>Basic mode</title>

<para>
In Basic mode, the window has the following panes:
</para>

<variablelist>

  <varlistentry>
    <term><guibutton>Directory and file names</guibutton></term>
    <listitem>
      <para>
      Contains options related to directories and filenames
      used by the software package.  In Basic mode the only
      option is <guibutton>Install architecture-independent
      files in PREFIX</guibutton>, which specifies the
      directory under which all the software project's files
      will be installed (e.g. <filename>/usr/local</filename>).
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Features and packages</guibutton></term>
    <listitem>
      <para>
      Contains options which control user-selectable
      features of the <filename>configure</filename> script.
      The exact contents depend on the particular script, and
      this may pane may not even be present if <filename>configure</filename>
      is particularly simple.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Preview</guibutton></term>
    <listitem>
      <para>
      Shows the command line of the <filename>configure</filename>
      script that corresponds to the options you have chosen.
      Note that the tooltip on each option shows you the name of
      the commandline option passed to <filename>configure</filename>.
      </para>
    </listitem>
  </varlistentry>

</variablelist>

</section> <!-- basic mode -->

<section>
<title>Advanced mode</title>

<graphic format=GIF fileref="configure-window-advanced.gif"></graphic>

<para>
In Advanced mode, more options become available in all the panes,
and two new panes appear:
</para>

<variablelist>

  <varlistentry>
    <term><guibutton>Configuration</guibutton></term>
    <listitem>
      <para>
      Contains options related to the behaviour of the
      <filename>configure</filename> script itself.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Host Type</guibutton></term>
    <listitem>
      <para>
      Contains options related to cross-compilation.
      This may pane may not be present if <filename>configure</filename>
      is particularly simple.
      </para>
    </listitem>
  </varlistentry>

</variablelist>


</section> <!-- advanced mode -->

</section> <!-- configure-window -->

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="about-maketool-window" xreflabel="About Maketool window">
<title>About Maketool window</title>


<graphic format=GIF fileref="about-maketool-window.gif"></graphic>

<para>
This window shows information about Maketool's version, who owns
the copyright, what kinds of warranty you don't have.  The
<guibutton>Licence...</guibutton> button shows the 
<xref linkend="licence-window">.
</para>


</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="licence-window" xreflabel="Licence window">
<title>Licence window</title>

<graphic format=GIF fileref="licence-window.gif"></graphic>

<para>
This window shows the text of the GNU General Public License
(or GPL) which is the licence under whose terms Maketool
is distributed.
</para>

<para>
For more information on the GPL, please read
<ulink url="http://www.gnu.org/licenses/gpl-faq.txt">the GPL FAQ</ulink>.
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="about-make-window" xreflabel="About Make window">
<title>About Make window</title>

<graphic format=GIF fileref="about-make-window.gif"></graphic>

<para>
This window shows information about GNU make, extracted from
the <command>gmake --version</command> command.
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="metacharacters" xreflabel="Metacharacters">
<title>Metacharacters</title>

<para>
Metacharacters are "magical" characters which are interpreted
in special ways when encountered by a program in it's input.
Many different &osname; programs implement metacharacters, and
the concept is one the most useful and powerful features of a
&osname; system.
</para>

<para>
However, like any powerful tool, unless you know what you're doing
you can have some very unpleasant experiences with metacharacters.
So unless you know exactly what you're doing, it's wise to avoid using
metacharacters in filenames and other data used in
<command>maketool</command>.  Here be dragons!
</para>

<para>
Usually, metacharacters are the odd punctuation characters
around the edge of your keyboard, such as $ * or &amp;.  If you
stick to using letters, numbers, and the / (slash) - (dash)
. (dot) and _ (underscore) characters, you should be fine.
</para>

<para>
If you're still reading this, you either know what you're doing,
or you want to know.  To discourage you further, here are some of the
reasons why metacharacters can cause unwanted consenquences and
make debugging painful.
</para>

<itemizedlist>

  <listitem>
    <para>
    Many different &osname; programs (e.g. the shell, <command>gmake</command>,
    <command>sed</command>, <command>m4</command>, <command>awk</command>
    and the C compiler) interpret metacharacters.
    </para>
  </listitem>

  <listitem>
    <para>
    Sometimes it's not easy to tell which programs are going to be
    involved in processing data, especially if you use someone else's
    complex shell script.
    </para>
  </listitem>

  <listitem>
    <para>
    All programs have a quoting convention which enables you to quote
    metacharacters, usually by proceeding the metacharacter with a
    \ (backslash) character.  However, the shell has
    <emphasis>three</emphasis> quoting conventions, which can interact.
    </para>
  </listitem>

  <listitem>
    <para>
    Scripts for one program can call other programs (e.g. a shell
    script calls <command>sed</command>), or build other scripts
    and then call them.  To work properly in the presence of
    metacharacters, the calling script needs to be aware of the other
    program's quoting convention; many scripts don't do this.
    </para>
  </listitem>

  <listitem>
    <para>
    The sets of metacharacters implemented by the various programs
    overlap, but only partially.  For example, <function>${HOME}</function>
    has the same meaning in the shell and <command>gmake</command>
    but <function>$(HOME)</function> does not.
    </para>
  </listitem>

  <listitem>
    <para>
    A similar situation exists with whitespace (space, tab and
    newline) characters, which are interpreted specially in the
    shell and <command>gmake</command>.
    </para>
  </listitem>

</itemizedlist>


<para>
If you're still reading this, there is some hope.  Sometimes you can
achieve what you want with intelligent use of backslash quoting; the
trick is knowing how many backquotes you need.  Sometimes a combination
of backslash and double-quote or single-quote quoting works.  Unfortunately
the consenquences of too much or too little quoting can be as bad as
the problems you were trying to avoid in the first place.
Really, <emphasis>the best course is to simply avoid using
metacharacters and whitespace</emphasis> when naming files or directories.
</para>

<para>
If you're still not convinced, here's a quick summary of metacharacter-related
failure modes when using the <command>autoconf</command> system.
</para>

<para>
First, a quick summary of how <command>autoconf</command> works.
The developer uses the <command>autoconf</command> program, which
runs <command>m4</command> to process the file <filename>configure.in</filename>
into a shell script named <filename>configure</filename>, which
is then distributed with the application source.  The builder runs
the <filename>configure</filename> script, which amongst many other
things uses <command>awk</command> and <command>sed</command> to process
input data.  As it's final step,
<filename>configure</filename> creates two new shell scripts named
<filename>config.cache</filename> and <filename>config.status</filename>
and runs <filename>config.status</filename>.  The next time
<filename>configure</filename> is run, it runs <filename>config.cache</filename>
as it's first step.  The <filename>config.status</filename> script uses
<command>sed</command> to create various other files from
input templates, usually <filename>Makefile</filename> from
<filename>Makefile.in</filename> and <filename>config.h</filename>
from <filename>config.h.in</filename>.  Then the builder uses
<command>gmake</command>, which uses the information in
<filename>Makefile</filename> to construct and run shell commands to
compile and link the source code.  Compilation usually uses information
in <filename>config.h</filename>.
</para>

<para>
At <emphasis>each and every one</emphasis> of these steps, stray
metacharacters or whitespace can cause damage ranging from the build
process failing with an error, to more dangerous and subtle problems
like new files being installed into incorrect directories or over
precious system files.
</para>

<para>
Here's a summary of how each character can cause failures
in the <command>autoconf</command> chain (for clarity, starting 
at the step where you run the <filename>configure</filename>
script).
</para>

<table frame=none>
  <title>Metacharacter-related failure modes of autoconf</title>
  <tgroup cols=2 colsep=0 rowsep=0>
    <thead>

      <row>
        <entry>Metacharacter(s)</entry>
        <entry>Failure modes</entry>
      </row>

    </thead>
    <tbody>

      <!-- Yes I am aware of the Pernicious Mixed Content problem -->
      
      <row>
        <entry>(space)</entry>
        <entry>
	<xref linkend="metachar-note-2">, <xref linkend="metachar-note-3">, <xref linkend="metachar-note-4">
	</entry>
      </row>

      <row>
        <entry>(tab)</entry>
        <entry>
	<xref linkend="metachar-note-2">, <xref linkend="metachar-note-3">, <xref linkend="metachar-note-4">
    	</entry>
      </row>

      <row>
        <entry>( ) (parentheses)</entry>
        <entry>
	<xref linkend="metachar-note-3">
	</entry>
      </row>

      <row>
        <entry>* (asterisk)</entry>
        <entry>
	<xref linkend="metachar-note-3">
	</entry>
      </row>

      <row>
        <entry>? (question mark)</entry>
        <entry>
	<xref linkend="metachar-note-3">
	</entry>
      </row>

      <row>
        <entry>[ ] (square brackets)</entry>
        <entry>
	<xref linkend="metachar-note-3">
	</entry>
      </row>

      <row>
        <entry>$ (dollar sign)</entry>
        <entry>
	<xref linkend="metachar-note-4">, <xref linkend="metachar-note-5">
	</entry>
      </row>

      <row>
        <entry>; (semicolon)</entry>
        <entry>
	<xref linkend="metachar-note-5">
	</entry>
      </row>

      <row>
        <entry>" (double quote)</entry>
        <entry>
	<xref linkend="metachar-note-6">, <xref linkend="metachar-note-3">
	</entry>
      </row>

      <row>
        <entry>' (single quote)</entry>
        <entry>
	<xref linkend="metachar-note-7">, <xref linkend="metachar-note-8">, <xref linkend="metachar-note-3">, <xref linkend="metachar-note-7">
	</entry>
      </row>

      <row>
        <entry>\ (backslash)</entry>
        <entry>
	<xref linkend="metachar-note-6">, <xref linkend="metachar-note-3">
	</entry>
      </row>

      <row>
        <entry># (hash mark)</entry>
        <entry>
	<xref linkend="metachar-note-4">
	</entry>
      </row>

      <row>
        <entry>! (exclamation mark)</entry>
        <entry>
	<xref linkend="metachar-note-9">
	</entry>
      </row>

      <row>
        <entry>&amp; (ampersand)</entry>
        <entry>
	<xref linkend="metachar-note-3">
	</entry>
      </row>

      <row>
        <entry>| (vertical bar)</entry>
        <entry>
	<xref linkend="metachar-note-3">
	</entry>
      </row>

      <row>
        <entry>` (backquote)</entry>
        <entry>
	<xref linkend="metachar-note-7">, <xref linkend="metachar-note-3">
	</entry>
      </row>

      <row>
        <entry>&lt; &gt; (less, greater)</entry>
        <entry>
	<xref linkend="metachar-note-3">
	</entry>
      </row>

      <row>
        <entry>% (percent sign)</entry>
        <entry>
	<xref linkend="metachar-note-4">, <xref linkend="metachar-note-5">
	</entry>
      </row>

    </tbody>
  </tgroup>
</table>


<variablelist>
  <title>Index to failure modes</title>

  <varlistentry>
    <term><anchor id="metachar-note-2" xreflabel="config.site">config.site</term>
    <listitem>
      <para>
      The <filename>configure</filename> script finishes correctly but
      undesired whitespace expansion causes confusing error messages
      when <filename>configure</filename> tries to load the site
      configuration file <filename>config.site</filename> using a
      path relative to the directory specified with <option>--prefix</option>.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><anchor id="metachar-note-3" xreflabel="shell">shell</term>
    <listitem>
      <para>
      The <filename>configure</filename> script works but <command>gmake</command>
      will probably fail due to unexpected expansion by the shell of
      metacharacters or whitespace in commands given to the shell
      by <command>gmake</command>.  This may be solved by adding quoting.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><anchor id="metachar-note-4" xreflabel="gmake runtime">gmake runtime</term>
    <listitem>
      <para>
      The <filename>configure</filename> script works but <command>gmake</command>
      will probably fail due to unexpected expansion by <command>gmake</command>
      of metacharacters or whitespace in commands given to the shell
      by <command>gmake</command>.  This may be solved by adding quoting.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><anchor id="metachar-note-5" xreflabel="gmake parsetime">gmake parsetime</term>
    <listitem>
      <para>
      The <filename>configure</filename> script works but <command>gmake</command>
      will probably fail due to parse errors in <filename>Makefile</filename>
      caused by expansion by <command>gmake</command> of variables
      whose values contain metacharacters or whitespace.  This may be solved by adding quoting.
      The error is typically:
      </para>
      <programlisting>
Makefile:10: *** missing separator.  Stop.
      </programlisting>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><anchor id="metachar-note-6" xreflabel="C strings">C strings</term>
    <listitem>
      <para>
      The <filename>configure</filename> script works but the C compiler will
      generate syntax errors if metacharacters are used in a string literal
      in <filename>config.h</filename> or other C code.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><anchor id="metachar-note-7" xreflabel="balance">balance</term>
    <listitem>
      <para>
      The <filename>configure</filename> script will fail with shell syntax
      error if the quotes are unbalanced, i.e. do not occur in pairs.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><anchor id="metachar-note-8" xreflabel="lost">lost</term>
    <listitem>
      <para>
      The <filename>configure</filename> script works but the metacharacter
      is lost from values in created files such as <filename>Makefile</filename>.
      This may be solved by adding quoting.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><anchor id="metachar-note-9" xreflabel="interactive">interactive</term>
    <listitem>
      <para>
      The <command>autoconf</command> system works fine but the metacharacter needs
      to be quoted when used in an interactive shell session, for example if you
      use <command>ls</command> to look in a directory whose name contains the
      metacharacter.
      </para>
    </listitem>
  </varlistentry>

</variablelist>


<para>
If you're still not frightened of metacharacters, go buy a good book on
the UNIX shell and read it.  Alternatively, the
<ulink url="http://linuxdoc.org/LDP/abs/html/index.html">Advanced Bash-Scripting Guide</ulink>
is available online.  You will learn a powerful and useful tool.
</para>

</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="make-systems" xreflabel="Make Systems">
<title>Make Systems</title>


<para>
The name <emphasis>make system</emphasis> is used in this documentation
to refer to one of the various systems used to construct a
<filename>Makefile</filename> from another source file.  These systems are
intend to make the creation and maintenance of Makefiles simpler.
</para>

<para>
The important thing to understand about make systems is that the source
of a software project which uses one of these systems is delivered without a
Makefile.  This means that some extra command(s) need to be
performed before <command>gmake</command> can be run the first time.
</para>

<para>
For people unused to building free software, this represents extra
complexity right at the time when they are least equipped to handle
it.  Maketool tries to soften this impact by:
</para>

<itemizedlist>

  <listitem>
    <para>
    automatically detecting which (if any) make system is used by
    the software project;
    </para>
  </listitem>

  <listitem>
    <para>
    providing (in the <xref linkend="build-menu">) a command to
    update the Makefile, and various other commands related to
    the make system;
    </para>
  </listitem>

  <listitem>
    <para>
    automatically updating the Makefile every time a target is
    built (if the <xref linkend="enable-make-makefile"> checkbox is on).
    </para>
  </listitem>

</itemizedlist>

<para>
Maketool knows about all the popular make systems used with
free software today:
</para>

<itemizedlist>
  <listitem><para><xref linkend="automake"></para></listitem>
  <listitem><para><xref linkend="autoconf"></para></listitem>
  <listitem><para><xref linkend="imake"></para></listitem>
</itemizedlist>

</section> <!-- make-systems -->

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="automake" xreflabel="automake">
<title>automake</title>

<para>
This is the most powerful and high-end make system available today.  To
use automake, you only need to provide the briefest sketch of a
<filename>Makefile</filename>, in a file called
<filename>Makefile.am</filename>, and automake does the rest.
</para>

<para>
Automake requires use of the <xref linkend="autoconf">
system for discovering and recording configuration information.
See the <ulink url="info:automake">GNU automake documentation</ulink> for
more information.
</para>

<para>
When maketool detects that the current directory is using automake,
the following commands appear in the <xref linkend="build-menu">.
</para>

<variablelist>

  <varlistentry>
    <term><guibutton>Makefile</guibutton></term>
    <listitem>
      <para>
      Performs all the actions necessary to update the
      <filename>Makefile</filename> from whatever files it
      depends on.  This is usually all you ever need to do:
      it performs all the other commands listed below but in
      the correct order and only if they are necessary.
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Run automake</guibutton></term>
    <listitem>
      <para>
      Runs the <command>automake -a</command> command to generate
      <filename>Makefile.in</filename> from <filename>Makefile.am</filename>.
      This is useful when you are working on <filename>Makefile.am</filename>.
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Run autoconf</guibutton></term>
    <listitem>
      <para>
      Runs the <command>autoconf</command> command to generate
      <filename>configure</filename> from <filename>configure.in</filename>.
      This is useful when you are working on <filename>configure.in</filename>.
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Remove config.cache</guibutton></term>
    <listitem>
      <para>
      Removes the <filename>config.cache</filename> file, which is
      used to cache information discovered by the <filename>configure</filename>
      script.  This is sometimes necessary when you are working on
      <filename>configure.in</filename>.
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Run configure...</guibutton></term>
    <listitem>
      <para>
      Shows the <xref linkend="configure-window">, which allows
      you to run the <filename>configure</filename> script.  This
      script accepts your configuration choices, discovers various
      information about the operating system, and finally generates
      <filename>Makefile</filename> (and usually some other files,
      such as <filename>config.h</filename>).
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Run config.status</guibutton></term>
    <listitem>
      <para>
      Runs the <filename>config.status</filename> script, which
      is produced by the <filename>configure</filename> script
      and generates <filename>Makefile</filename> (and usually some other 
      files, such as <filename>config.h</filename>).  This is useful
      when you are working on <filename>Makefile.am</filename> or
      <filename>config.h.in</filename>, because it is faster than
      running the <filename>configure</filename> script itself.
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

</variablelist>


</section> <!-- automake -->

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="autoconf" xreflabel="autoconf">
<title>autoconf</title>


<para>
Autoconf is a system for discovering configuration information
about the operating system, and encoding that information in
various files.  It is used to avoid portability issues and to
provide a standard interface for selecting configurable options.
</para>

<para>
Typically, autoconf will be used to generate the <filename>Makefile</filename>
from a file called <filename>Makefile.in</filename>, and
<filename>config.h</filename> from a file called
<filename>config.h.in</filename>.
</para>

<para>
However, autoconf is considerably more flexible than this and can
be used in other ways.  See the
<ulink url="info:autoconf">GNU autoconf documentation</ulink> for more
information.
</para>

<para>
When maketool detects that the current directory is using automake,
the following commands appear in the <xref linkend="build-menu">.
</para>

<variablelist>

  <varlistentry>
    <term><guibutton>Makefile</guibutton></term>
    <listitem>
      <para>
      Performs all the actions necessary to update the
      <filename>Makefile</filename> from whatever files it
      depends on.  This is usually all you ever need to do:
      it performs all the other commands listed below but in
      the correct order and only if they are necessary.
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Run autoconf</guibutton></term>
    <listitem>
      <para>
      Runs the <command>autoconf</command> command to generate
      <filename>configure</filename> from <filename>configure.in</filename>.
      This is useful when you are working on <filename>configure.in</filename>.
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
      <para>
      This command only appears if the current directory contains
      a <filename>configure.in</filename> file (sometimes software is
      distributed without this file, although that is not a good
      practice).
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Remove config.cache</guibutton></term>
    <listitem>
      <para>
      Removes the <filename>config.cache</filename> file, which is
      used to cache information discovered by the <filename>configure</filename>
      script.  This is sometimes necessary when you are working on
      <filename>configure.in</filename>.
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Run configure...</guibutton></term>
    <listitem>
      <para>
      Shows the <xref linkend="configure-window">, which allows
      you to run the <filename>configure</filename> script.  This
      script accepts your configuration choices, discovers various
      information about the operating system, and finally generates
      <filename>Makefile</filename> (and usually some other files,
      such as <filename>config.h</filename>).
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Run config.status</guibutton></term>
    <listitem>
      <para>
      Runs the <filename>config.status</filename> script, which
      is produced by the <filename>configure</filename> script
      and generates <filename>Makefile</filename> (and usually some other 
      files, such as <filename>config.h</filename>).  This is useful
      when you are working on <filename>Makefile.am</filename> or
      <filename>config.h.in</filename>, because it is faster than
      running the <filename>configure</filename> script itself.
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

</variablelist>


</section> <!-- autoconf -->

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="imake" xreflabel="imake">
<title>imake</title>

<para>
Imake is an old-fashioned make system used for building the
X Window System and some third-party XWindows and Motif
programs.
</para>

<para>
Most uses of imake are being replaced by autoconf, which does
the same job but more flexibly.   For example, the
<filename>configure</filename> script in autoconf has a
<option>--help</option> option which shows the user what
options are available; there is no equivalent in imake.
If your project uses imake, please consider learning
<xref linkend="autoconf">.
</para>

<para>
See the <ulink url="man:imake">imake documentation</ulink> for
more information.
</para>

<para>
When maketool detects that the current directory is using automake,
the following commands appear in the <xref linkend="build-menu">.
</para>

<variablelist>

  <varlistentry>
    <term><guibutton>Makefile</guibutton></term>
    <listitem>
      <para>
      Performs all the actions necessary to update the
      <filename>Makefile</filename> from whatever files it
      depends on.  This is usually all you ever need to do:
      it performs all the other commands listed below but in
      the correct order and only if they are necessary.
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term><guibutton>Run xmkmf</guibutton></term>
    <listitem>
      <para>
      Runs the <command>xmkmf</command> command to generate
      <filename>Makefile</filename> from <filename>Imakefile</filename>.
      </para>
      <para>
      The output appears in the <xref linkend="log-window">.
      </para>
    </listitem>
  </varlistentry>
  
</variablelist>


</section> <!-- imake -->

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->
<section id="standard-targets" xreflabel="Standard Targets">
<title>Standard Targets</title>

<variablelist>

  <varlistentry>
    <term>all</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>check</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>clean</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>dist</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>distclean</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>dvi</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>info</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>install</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>installcheck</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>installdirs</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>install-strip</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>maintainer-clean</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>mostlyclean</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>reallyclean</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>TAGS</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>tags</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>uninstall</term>
    <listitem>
      <para>
      </para>
    </listitem>
  </varlistentry>

</variablelist>


</section>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- -->

</article>
