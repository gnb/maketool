#!/bin/sh
#
# Maketool - GTK-based front end for gmake
# Copyright (c) 1999-2000 Greg Banks
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# $Id: make_makefile.in,v 1.2 2000-07-21 06:12:03 gnb Exp $
#


ME=make_makefile

x="\$"
MYCVSID="\$Id: make_makefile.in,v 1.2 2000-07-21 06:12:03 gnb Exp $x"

MAKEFILE=
MAKE=@GMAKE@
MAKEFLAGS=
MAKESYS=undefined
MAKESYS_HANDLED=no
DEBUG=no
METAMAKEFILE=${TMPDIR:-/tmp}/make_makefile$$
trap "/bin/rm -f $METAMAKEFILE" 0 1 11 15

usage ()
{
    echo "Usage: $ME [-f makefile]" 1>&2
    exit 1;
}

while [ $# -gt 0 ]; do
    case "$1" in
    -f) MAKEFILE="$2"; shift ;;
    --debug) DEBUG=yes ;;
    --make-system) MAKESYS="$2" ; shift ;;
    -*) usage ;;
    *) usage ;;
    esac
    shift
done

# TODO: add make flags to $MAKEFLAGS
# TODO: is MAKEFILE is specified and is in a different directory,
# change to that directory to do autoconf stuff.

fatal ()
{
    echo "$ME: $*" 1>&2
    exit 1
}

message ()
{
    echo "$ME: $*" 1>&2
}

debugmessage ()
{
    if [ $DEBUG = yes ]; then
    	echo "$ME: (debug) $*" 1>&2
    fi
}

# TODO: grep configure.in for <Makefile>

############################################################

# Check for projects using autoconf.


if [ "$MAKESYS" = undefined ]; then
    if [ -f configure.in ]; then
	debugmessage "found configure.in"
	# Just In Case
	if grep '^AC_INIT(' configure.in >/dev/null ; then
	    debugmessage "configure.in seems to be for autoconf"
    	    MAKESYS=autoconf
	fi
    elif [ -x configure ]; then
	debugmessage "found configure"
	# Be paranoid, some older software may have pre-autoconf `configure' scripts.
	if grep '^# Generated automatically using autoconf' configure >/dev/null ; then
	    debugmessage "configure seems to be from autoconf"
    	    MAKESYS=autoconf
	fi
    fi
fi

if [ "$MAKESYS" = autoconf ]; then
    if [ -z "$MAKEFILE" ]; then
    	# Figure out makefile from existing files.
	MAKEFILE=`ls -1 {GNUm,M,m}akefile{,.in} 2>/dev/null | head -1 | sed -e 's/\.in$//'`
	test -n "$MAKEFILE" || fatal "project seems to use autoconf but no makefile or makefile input is present"
	debugmessage "makefile unspecified, using $MAKEFILE"
    else
    	# Check that the specified makefile has a .in file
	test -f "${MAKEFILE}.in" || fatal "project seems to use autoconf but ${MAKEFILE}.in is not present"
    	debugmessage "makefile $MAKEFILE specified"
    fi
    debugmessage "creating $METAMAKEFILE"
    cat <<EOF >$METAMAKEFILE || fatal "couldn't create temporary makefile"
#
# Temporary makefile generated by $ME $MYCVSID
#

CONFIGUREFLAGS=
$MAKEFILE: ${MAKEFILE}.in configure
	@if [ -x ./config.status ]; then \\
	  echo "./config.status" ;\\
	  ./config.status ;\\
	else \\
	  echo "./configure \$(CONFIGUREFLAGS)" ;\\
	  ./configure \$(CONFIGUREFLAGS) ;\\
	fi
EOF
    # Append rules to handle autoconf if the configure.in is present too.
    if [ -f configure.in ]; then
	cat <<EOF >>$METAMAKEFILE || fatal "couldn't create temporary makefile"

AUTOCONF=autoconf
AUTOCONFFLAGS=
configure: configure.in
	\$(AUTOCONF) \$(AUTOCONFFLAGS)
	-\$(RM) config.status config.cache
	
EOF
    fi
    MAKESYS_HANDLED=yes
fi

############################################################

# Check for projects using Imake.

if [ "$MAKESYS" = undefined ]; then
    if [ -f Imakefile ]; then
	debugmessage "found Imakefile"
	MAKESYS=imake
    fi
fi

if [ $MAKESYS = imake ]; then
    test -f Imakefile || fatal "project seems to use imake but no Imakefile is present"
    test -z "$MAKEFILE" -o "$MAKEFILE" = Makefile || fatal "project seems to use imake but makefile is not called Makefile"
    MAKEFILE=Makefile
    debugmessage "creating $METAMAKEFILE"
    cat <<EOF >$METAMAKEFILE || fatal "couldn't create temporary makefile"
#
# Temporary makefile generated by $ME $MYCVSID
#

XMKMF=xmkmf
XMKMFFLAGS=
Makefile: Imakefile
	\$(XMKMF) \$(XMKMFFLAGS)

EOF
    MAKESYS_HANDLED=yes
fi

############################################################

# TODO: automake

############################################################

if [ $MAKESYS_HANDLED != yes ]; then
    debugmessage "make system $MAKESYS not handled"
    exit 0
fi

if [ -f $METAMAKEFILE ]; then
    $MAKE $MAKEFLAGS -f $METAMAKEFILE $MAKEFILE
fi
