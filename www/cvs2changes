#!/bin/sh
#
# $Id: cvs2changes,v 1.2 1999-11-07 11:13:21 gnb Exp $
#
# Shell script to build a change log for a new release
# from CVS logs. The change log will still need some
# manual editing to re-express changes for users, etc.
#

REV1=$1
REV2=$2
PACKAGE=${3:-maketool}
#PREVIEW=yes
#FILES="Makefile.in Makefile configure.in"
DATE=`date '+%d %b %Y'`
CHECKFILE="Makefile.in"
IGNOREDIRS="www po"

LOG=CHANGES
OLDLOG=CHANGES.$$

canon_tag ()
{
    # Usage: canon_tag rev
    echo "${PACKAGE}_$1" | tr a-z. A-Z_
}

get_last_rev_tag ()
{
    TAGPREFIX=`canon_tag ""`
    cvs log -h $CHECKFILE |\
    	awk '/^	'$TAGPREFIX'[0-9_]*:/{print substr($1,1,length($1)-1); exit}'
	
}

if [ -z "$REV1" ]; then
    # calculate previous tagged revision by getting
    # most recent tag of the correct format
    TAG1=`get_last_rev_tag`
else
    TAG1=`canon_tag "$REV1"`
fi

if [ -z "$REV2" ]; then
    # Use the magic tag `HEAD' which indicates the
    # most recent revision on a per-file basis
    TAG2="HEAD"
    REV2="latest revision"
    #PREVIEW=yes
else    
    TAG2=`canon_tag "$REV2"`
fi

echo "Compiling changes from $PACKAGE tags $TAG1 to $TAG2 into $LOG"

# state:
# 0 = reading log header
# 1 = just read description separator, waiting for 1st line of description
# 2 = reading 2nd & subsequent lines
canonicalise ()
{
    awk '
BEGIN {
    state = 0;
    inattic = 0;
    desc = "";
}
/^date: / {
    if (state == 0) {
    	state = 1;
	next;
    }
}
/^RCS file: .*\/Attic\// {
    if (state == 0) {
    	inattic = 1;
	next;
    }
}
/^----------------/ {
    if (desc != "") print desc;
    state = 0;
}
/^================/ {
    state = 0;
    inattic = 0;
    desc = "";
}
{
    if (state == 0 || inattic) {
    	next;
    } else if (state == 1) {
	indent = "x  ";
	state++;
    } else if (state == 2) {
	indent = "   ";
    }
    line = $0;
    if (substr(line, 1, 3) == "x  " || substr(line, 1, 3) == "   ") {
    	prefix = "";
    } else if (substr(line, 1, 2) == "x " || substr(line, 1, 2) == "  ") {
    	line = substr(line, 3, length(line))
    	prefix = indent;
    } else {
    	prefix = indent;
    }
    desc = desc"\n"prefix""line;
}
'
}

uniquify ()
{
    awk '
BEGIN {
    alldesc[""] = 0;
    desc = "";
}
/^$/ {
    next;
}
/^x  / {
    alldesc[desc]++;
    desc = $0;
}
/^   / {
    desc = desc"\n"$0
}
END {
    alldesc[desc]++;
    for (i in alldesc) {
    	if (i != "") print i;
    }
}
'
}

getDirs ()
{
    IGNOREEXP=`echo "$IGNOREDIRS" | sed -e 's:[ 	][  ]*:|:g'`
    find . -type d -name CVS -print |\
    	sed -e 's:/CVS$::'  -e 's:^\./::' |\
	egrep -v '^('$IGNOREEXP')$'
}

gatherChanges ()
{
    echo "* $REV2  ($DATE)"
    if [ -z "$FILES" ]; then
    	FILES="-l "`getDirs`
    fi
    cvs log -r${TAG1}:${TAG2} $FILES 2>&1 | canonicalise | uniquify
    echo ""
}


if [ "$PREVIEW" = yes ] ; then
    gatherChanges
else
    mv $LOG $OLDLOG && \
    gatherChanges > $LOG && \
    cat $OLDLOG >> $LOG && \
    rm $OLDLOG
fi
